#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug  4 16:15:21 2017

@author: kremin
"""
import numpy as np
import astropy.constants as astconsts
from astropy.table import Table

class ClusterData:
    def __init__(self,rawdata=None,ras=None,decs=None,specs=None,gal_mags=None,gal_memberflags=None,clus_ra=None,clus_dec=None,clus_z=None,\
                    gal_r=None,gal_v=None,r200=None,clus_vdisp=None,clus_name=None,abs_flag=None):

        if (rawdata is None) and ( (ras is None) | (decs is None) | (specs is None) ):
            raise(IOError,"Bad table. RA, DEC, and z are required.")

        if rawdata is not None:
            rawdata = np.asarray(rawdata)
            if rawdata.shape[0] < rawdata.shape[1]:
                rawdata = rawdata.T
            colnames = ['RA','DEC','z']
            data = Table(data=rawdata[:,:3],names=colnames)
            if ( (gal_memberflags is None) and (rawdata.shape[1] > 4) ):
                self.gal_memberflag = rawdata[:,4]
            else:
                self.gal_memberflag = gal_memberflags
            if ( (gal_mags is None) and (rawdata.shape[1] > 3) ):
                self.gal_mags = rawdata[:,3]
            else:
                self.gal_mags = gal_mags
        else:
            racol = Table.Column(data=ras,name='RA')
            deccol = Table.Column(data=decs,name='DEC')
            speccol = Table.Column(data=specs,name='Z')
            data = Table([racol,deccol,speccol])
            self.gal_mags = gal_mags
            self.gal_memberflag = gal_memberflags

                
        if clus_ra is None:
            #calculate average ra from galaxies
            self.clus_ra = np.median(data['RA'][:])
        else:
            self.clus_ra = clus_ra
        if clus_dec is None:
            #calculate average dec from galaxies
            self.clus_dec = np.median(data['DEC'][:])
        else:
            self.clus_dec = clus_dec
        if gal_r is None:
            #Reduce data set to only valid redshifts
            self.data_spec = data[np.where((np.isfinite(data['z'][:])) & (data['z'][:] > 0.0) & (data['z'][:] < 5.0))]
        else:
            self.data_spec = data[np.where(np.isfinite(gal_v))]
        if clus_z is None:
            #calculate average z from galaxies
            self.clus_z = np.median(self.data_spec['z'][:])
        else:
            self.clus_z = clus_z
        if gal_v is None:
            self.v = (astconsts.c.value/1000.)*(self.data_spec['z'][:] - self.clus_z)/(1+self.clus_z)
        else:
            self.v = gal_v
        if abs_flag is None:
            self.abs_flag = False
        else:
            self.abs_flag = abs_flag
        # Now define the rest where we can't estimate defaults
        self.r = gal_r
        self.r200 = r200
        self.clus_vdisp = clus_vdisp
        self.clus_name = clus_name
        
        
class CausticFitResults:
    '''
    Initialized as a trivial class, but meant to be used to store all of the 
    fit values generated by the Caustic class in the Caustic.run_caustic function
    '''
    pass


class MassInfo:
    '''
    A simple data object that holds information related to the caustic estimated
    mass values
    '''
    def __init__(self, g_b=None, conc=None, f_beta=None, massprofile=None, \
                 avg_density=None, r200_est=None, M200=None):
        self.g_b = g_b
        self.conc = conc
        self.f_beta = f_beta
        self.massprofile = massprofile
        self.avg_density = avg_density
        self.r200_est = r200_est
        self.M200 = M200